#include <Wire.h>
#include <SPI.h>
//Important! PN532 Library must be edited! Remove lower page check from ntag2xx_WritePage to allow writting to pages lower then 4 (we need write access on page 2 and 3)
#include <Adafruit_PN532.h>

#define PN532_IRQ   (2)
#define PN532_RESET (3)

Adafruit_PN532 nfc(PN532_IRQ, PN532_RESET);
void setup() {
  // put your setup code here, to run once:
 // put your setup code here, to run once:
  Serial.begin(115200);
  Serial.println(F("Hello!"));
  nfc.begin();

  uint32_t versiondata = nfc.getFirmwareVersion();
  if (! versiondata) {
    Serial.print(F("Didn't find PN53x board"));
    while (1); // halt
  }
  // Got ok data, print it out!
  Serial.print(F("Found chip PN5")); Serial.println((versiondata >> 24) & 0xFF, HEX);
  Serial.print(F("Firmware ver. ")); Serial.print((versiondata >> 16) & 0xFF, DEC);
  Serial.print('.'); Serial.println((versiondata >> 8) & 0xFF, DEC);

  // configure board to read RFID tags
  nfc.SAMConfig();
  Serial.println(F("Please Scan Blank NFC215 Tag"));
}

void loop() {
  // put your main code here, to run repeatedly:
  uint8_t success;
  uint8_t stageSuccess;
  char continueRespone = 0;
  uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer to store the returned UID
  uint8_t uidLength;                        // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
  // 1.) Wait for an NTAG203 card.  When one is found 'uid' will be populated with
  // the UID, and uidLength will indicate the size of the UID (normally 7)
  success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);

  // It seems we found a valid ISO14443A Tag!
  if (success)
  {
    // 2.) Display some basic information about the card
    Serial.println(F("Found card"));
    Serial.print(F("  UID Length: ")); Serial.print(uidLength, DEC); Serial.println(F(" bytes"));
    Serial.print(F("  UID Value: "));
    nfc.PrintHex(uid, uidLength);
    Serial.println("");

    if (uidLength != 7)
    {
      Serial.println(F("This doesn't seem to be an NTAG203 tag (UUID length != 7 bytes)!"));
    }
    else
    {
      Serial.println(F("\n\nSend a character to continue!"));
      while (!Serial.available());
      while (Serial.available()) {
        Serial.read();
      }
      Serial.flush();
      Serial.println(F("Valid Tag, Starting Write Process"));
      stageSuccess = writeTag();
      if (stageSuccess) {
        //Ask for confirmation
        Serial.println(F("Reading Tag for verification"));
        readTag();
        Serial.println(F("\n\nWould you like to conitnue to lock?"));
        Serial.println(F("This is irreversable, but required for use. (N/y)"));
        while (!Serial.available());
        while (Serial.available()) {
          continueRespone = Serial.read();
          if (continueRespone == 89 || continueRespone == 121) {
            stageSuccess = dynamicLockTag();
            if (stageSuccess) {
              staticLockTag();
            }
          }
          else {
            Serial.println(F("Aborting...."));
          }

        }
      }
    }

  }
  Serial.println(F("\n\nSend a character to continue!"));
  while (!Serial.available());
  while (Serial.available()) {
    Serial.read();
  }
  Serial.flush();
}
void readTag(){
    uint8_t success;
   uint8_t data[32];
      for (uint8_t i = 0; i < 135; i++) 
      {
        success = nfc.ntag2xx_ReadPage(i, data);
        // Display the current page number
        Serial.print(F("PAGE "));
        if (i < 10)
        {
          Serial.print("0");
          Serial.print(i);
        }
        else
        {
          Serial.print(i);
        }
        Serial.print(": ");

        // Display the results, depending on 'success'
        if (success) 
        {
          // Dump the page data
          nfc.PrintHexChar(data, 4);
        }
        else
        {
          Serial.println(F("Unable to read the requested page!"));
        }
      }      
}
byte writeTag() {
    uint8_t success;
  //We write pages 3 - 134, skipping page 130
  //We later will write pages 2 and 130, since these pages will lock others
  //If this step fails, we should abort to prevent killing a card
  //To-Do - add UUID check to make sure dump was edited for this uuid
  byte dataBlock[]  = {
    0x04, 0x91, 0x97, 0x8A,
    0xD2, 0x39, 0x4D, 0x80,
    0x26, 0x48, 0x00, 0x00,
    0xF1, 0x10, 0xFF, 0xEE,
    0xA5, 0x00, 0x00, 0x00,
    0x2B, 0x4F, 0xC6, 0xA9,
    0x2C, 0xE6, 0xFB, 0x1A,
    0x1B, 0xF6, 0x8F, 0xF9,
    0x23, 0xE0, 0x3C, 0x75,
    0x7E, 0x41, 0xA1, 0x4A,
    0x3F, 0x5C, 0x62, 0x1F,
    0x7D, 0x0A, 0x3A, 0x4A,
    0xC4, 0x45, 0xE8, 0x3F,
    0x74, 0x90, 0x10, 0x99,
    0x70, 0x03, 0x1E, 0xAA,
    0xE1, 0xDC, 0xDC, 0x42,
    0x91, 0x74, 0xEC, 0xEA,
    0x59, 0x9A, 0x3F, 0x88,
    0xEC, 0x49, 0x82, 0x3A,
    0x54, 0x27, 0x71, 0x69,
    0xF8, 0x23, 0x58, 0x4B,
    0x03, 0x07, 0x00, 0x01,
    0x00, 0x64, 0x05, 0x02,
    0x30, 0x33, 0x33, 0x30,
    0xD1, 0x5D, 0x72, 0x33,
    0x22, 0xDE, 0x7A, 0xDF,
    0x7E, 0x7E, 0x5F, 0xA0,
    0x6A, 0x94, 0xDC, 0x85,
    0xFF, 0xB9, 0x0D, 0x49,
    0x42, 0x8B, 0x0A, 0x4A,
    0xE7, 0xB5, 0xF9, 0x72,
    0x69, 0x96, 0x10, 0xE6,
    0x1C, 0xF7, 0xFC, 0x99,
    0xDE, 0x44, 0xD4, 0xB7,
    0xCE, 0xF5, 0xCC, 0x92,
    0x13, 0xC2, 0x8E, 0x44,
    0x06, 0x43, 0x73, 0xF8,
    0x47, 0x12, 0xAD, 0xE6,
    0x0B, 0x30, 0xAB, 0xF7,
    0xCF, 0x39, 0x05, 0x13,
    0x4B, 0xEA, 0x4F, 0xC1,
    0xD2, 0x35, 0xF4, 0x72,
    0xAE, 0xB8, 0xA5, 0xB4,
    0xF0, 0x11, 0x81, 0x88,
    0x5A, 0x2A, 0x90, 0xB7,
    0xBF, 0x22, 0x56, 0x81,
    0x4B, 0x79, 0x0D, 0xE3,
    0xE3, 0x67, 0x46, 0xBC,
    0xA7, 0x9A, 0x03, 0x7B,
    0xEF, 0x8D, 0x20, 0xE9,
    0x6C, 0xBD, 0x00, 0xE8,
    0xCF, 0x68, 0xDB, 0x5B,
    0xFB, 0x30, 0x6F, 0x04,
    0xE1, 0xE4, 0x94, 0xD6,
    0x93, 0x1C, 0x81, 0x34,
    0x7E, 0x99, 0xA2, 0xDE,
    0x80, 0x8A, 0xEE, 0x9F,
    0x6D, 0x27, 0x08, 0x90,
    0xC0, 0xDC, 0x52, 0x95,
    0x2C, 0x5D, 0x4C, 0xAD,
    0xD6, 0x6C, 0xF8, 0x52,
    0x4C, 0xF8, 0x5E, 0x9D,
    0x4B, 0x41, 0x13, 0x96,
    0x8E, 0x08, 0xCC, 0xEA,
    0x2D, 0x72, 0xF6, 0x07,
    0xE3, 0x21, 0x75, 0x41,
    0x8F, 0x2D, 0xD6, 0xC3,
    0xF6, 0x9E, 0x2F, 0x70,
    0x05, 0x39, 0x68, 0x2D,
    0xA2, 0xBD, 0xB5, 0xCE,
    0xDE, 0xFB, 0xB0, 0x36,
    0xFD, 0xDA, 0xFC, 0xB7,
    0x94, 0x12, 0xCC, 0x2D,
    0x09, 0x96, 0x89, 0xF4,
    0x5C, 0x9F, 0xC8, 0x32,
    0xB4, 0x02, 0x92, 0x89,
    0x05, 0x32, 0x20, 0xDA,
    0x5A, 0xBE, 0xF0, 0x91,
    0x61, 0x10, 0x3D, 0xCC,
    0xAE, 0xF0, 0xC4, 0x55,
    0xD0, 0x47, 0x4D, 0x14,
    0xAB, 0x75, 0xEC, 0xA8,
    0xF8, 0xD0, 0x56, 0x19,
    0x00, 0x1B, 0x63, 0x49,
    0xDE, 0x6D, 0x0A, 0xDF,
    0x19, 0x86, 0xCA, 0x43,
    0x14, 0xD8, 0xF0, 0x35,
    0xC2, 0x5A, 0xAD, 0x56,
    0x3C, 0xFC, 0x09, 0xC0,
    0xD2, 0x26, 0xAB, 0x5D,
    0x5B, 0xA0, 0xE0, 0xF0,
    0x76, 0x80, 0x8B, 0x00,
    0xF9, 0x58, 0x45, 0xA4,
    0xAF, 0x01, 0x94, 0x42,
    0xA9, 0x47, 0x05, 0x5B,
    0x73, 0xFF, 0x9D, 0x5B,
    0x3F, 0x76, 0x93, 0xB7,
    0xC5, 0x82, 0xC6, 0xB8,
    0xA1, 0x95, 0x31, 0x12,
    0x7A, 0xDA, 0xE8, 0xBD,
    0x11, 0x43, 0x84, 0x5C,
    0x6B, 0x4A, 0x9D, 0x4C,
    0xBD, 0xD3, 0xF2, 0x24,
    0x22, 0x21, 0x62, 0xC4,
    0xE0, 0x17, 0x5B, 0xCA,
    0x04, 0xB0, 0x39, 0x7F,
    0x57, 0x5C, 0xA7, 0x68,
    0x98, 0x30, 0x69, 0x19,
    0x6D, 0x89, 0x85, 0x4A,
    0x12, 0xF6, 0x31, 0x15,
    0x9B, 0xD7, 0x24, 0xAE,
    0xD8, 0x14, 0x8C, 0xE5,
    0xCA, 0x42, 0xFF, 0xF8,
    0x36, 0x90, 0x30, 0x8C,
    0xED, 0xAD, 0x89, 0xF7,
    0xE1, 0x14, 0x28, 0xAB,
    0xC1, 0x15, 0x85, 0x3A,
    0x64, 0xB8, 0xCD, 0x96,
    0x9E, 0x13, 0x7C, 0xF0,
    0xCB, 0x25, 0x53, 0x19,
    0xD3, 0x24, 0x2E, 0xCF,
    0xD3, 0x0F, 0xDF, 0xD9,
    0xFB, 0x6F, 0x90, 0xE9,
    0x2B, 0x27, 0x92, 0xDC,
    0x1B, 0xDE, 0xC2, 0xE0,
    0xAC, 0xB9, 0x31, 0x14,
    0x49, 0x77, 0x84, 0x06,
    0xE2, 0xF1, 0x54, 0x84,
    0x1F, 0x53, 0x9C, 0xE7,
    0x76, 0xE0, 0x82, 0x0B,
    0x01, 0x00, 0x0F, 0xBD,
    0x00, 0x00, 0x00, 0x04,
    0x5F, 0x00, 0x00, 0x00,
    0xE9, 0xFB, 0x35, 0xEC,
    0x80, 0x80, 0x00, 0x00
  };
  Serial.println(F("Writing Data, Please Wait. "));
  //We are gonna hardcode pages for now, NTAG 215 spec has 540 bytes in 135 pages, 4 bytes per page. Pages numbered 0 - 134
  for (byte i = 3; i < 135; i++) {
    if ( i != 130) { //skip over lock page
      Serial.print(F("Page "));
      Serial.print(i);
      Serial.print(F(": "));
      dump_byte_array(dataBlock + (i * 4), 4);
      success = nfc.ntag2xx_WritePage(i, dataBlock + (i * 4));
      Serial.println(".");
      if (!success)
      {
        Serial.println(F(" ERROR!"));
        return 0;
      }
    }
  }
  Serial.println(F(" DONE!"));
  return 1;
}
byte dynamicLockTag() {
    uint8_t success;
  //Byte 0 Byte 1 and Byte 2 are dynamic Lock Bytes
  //These are set to 0x01,0x00,and 0x0F
  //This lock pages 16-17 and block 16-31
  //Byte 3 is always 0xBD
  byte dynamicLockBlock[]    = {
    0x01, 0x00, 0x0F, 0xBD
  };
  Serial.println(F("Writing Dynamic Lock, Please Wait. "));
  dump_byte_array(dynamicLockBlock, 4);
  success = nfc.ntag2xx_WritePage(130, dynamicLockBlock);
  Serial.print(".");
  if (!success)
  {
    Serial.println(F(" ERROR!"));
    return 0;
  }
  Serial.println(F("DONE!"));
  return 1;
}
byte staticLockTag() {
   uint8_t success;
  //Byte 0 is BCC1 (copy from hex dump)
  //Byte 1 is always 48
  //Byte 2 and Byte 3 are lock bytes, set to 0x0F and 0xE0
  //This locks pages 4-10
  byte staticLockBlock[]    = {
    0x26, 0x48, 0x0F, 0xE0
  };
  Serial.println(F("Writing Static Lock, Please Wait. "));
  dump_byte_array(staticLockBlock, 4);
  success = nfc.ntag2xx_WritePage(2, staticLockBlock);
  Serial.print(".");
  if (!success)
  {
    Serial.println(F(" ERROR!"));
    return 0;
  }
  Serial.println(F("DONE!"));
  return 1;
}
void dump_byte_array(byte * buffer, byte bufferSize) {
  for (byte i = 0; i < bufferSize; i++) {
    Serial.print(buffer[i] < 0x10 ? " 0" : " ");
    Serial.print(buffer[i], HEX);
  }
  }
